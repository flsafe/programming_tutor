--- 
- !ruby/struct:VCR::HTTPInteraction 
  request: !ruby/struct:VCR::Request 
    method: :post
    uri: http://www.ideone.com:80/api/1/service
    body: |-
      <?xml version="1.0" encoding="UTF-8"?><env:Envelope xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:wsdl="http://www.ideone.com/api/1/service" xmlns:env="http://schemas.xmlsoap.org/soap/envelope/"><env:Body><createSubmission><user>cozysystems</user><pass>Manbat22+</pass><sourceCode>#include &lt;unistd.h&gt;
      #include &lt;stdio.h&gt;
      #include &lt;string.h&gt;
      #include &lt;stdlib.h&gt;
      #include &lt;signal.h&gt;
      #include &lt;sys/wait.h&gt;
      #include &lt;sys/types.h&gt;
      
      /* Specifies the number of unit tests */
      #define N_UNIT_TESTS 5
      
      /* The maxium length of the YAML output string */
      #define MAX_YAML_LEN 1024
      
      /* The indentation in spaces in the yaml string */
      #define INDENT 4
      
      /* File descriptors for stdin and stdout */
      #define IN 0
      #define OUT 1
      
      #include &lt;stdio.h&gt;
      #include &lt;string.h&gt;
      
      void remove_char(char c, char str[]){
        int read = 0, write = 0;
        char curr;
      
        do{
          curr = str[read];
          if (curr != c)
            str[write++] = str[read];
          read++;
        } while (curr);
      }
      
      
      /* Pipe used to communicate with each forked process */
      int pipe_des[2];
      
      /* Used to ditch when something goes wrong */
      void quitif(int err){
        if (-1 == err){
          perror(&quot;error&quot;);
          exit(1);
        }
      }
      
      /* Used to build a yaml string */
      struct yaml_string{
        char yaml[MAX_YAML_LEN];
        int write;
      };
      
      struct yaml_string * create_yaml(){
        struct yaml_string * y;
        y = calloc(sizeof(struct yaml_string), sizeof(char));
        y-&gt;write = 0;
        return y;
      }
      
      void append_line(struct yaml_string * s, char * str, int indent){
        int i;
        int len = strlen(str);
      
        if (s-&gt;write + len &gt; MAX_YAML_LEN)
          return;
      
        indent = indent &lt; 0 ? 0 : indent;
        for (i = 0 ; i &lt; indent ; i++)
          s-&gt;yaml[s-&gt;write++] = ' ';
      
        for (i = 0 ; i &lt; len ; i++)
          s-&gt;yaml[s-&gt;write++] = str[i];
      
        s-&gt;yaml[s-&gt;write++] = '\n';
      }
      
      void flush_yaml(struct yaml_string * ys){
        int i, bytes_written;
      
        bytes_written = write(pipe_des[OUT], ys-&gt;yaml, ys-&gt;write);
        quitif(bytes_written);
      
        for (i = ys-&gt;write - 1 ; i ; i--)
          ys-&gt;yaml[i] = '\0';
        ys-&gt;write = 0;
      }
      
      void print_test_info(struct yaml_string * ys,
          char * name,
          char * input, 
          char * expected, 
          char * points){
      
        char test_name[256];
      
        sprintf(test_name, &quot;%s:&quot;, name);
        append_line(ys, test_name, 0);
          append_line(ys, &quot;input: |&quot;, INDENT);
            append_line(ys, input, INDENT * 2);
      
          append_line(ys, &quot;expected: |&quot;, INDENT);
            append_line(ys, expected, INDENT * 2);
      
          append_line(ys, &quot;points: |&quot;, INDENT);
            append_line(ys, points, INDENT * 2);
      
        flush_yaml(ys);
      }
      
      void print_test_output(struct yaml_string * ys, char * str){
        append_line(ys, &quot;output: |&quot;, INDENT);
          append_line(ys, str, INDENT * 2);
        flush_yaml(ys);
      }
      
      void test_first_char(){
        char str[128] = &quot;abcd&quot;;
        struct yaml_string * ys = create_yaml();
      
        print_test_info(ys, &quot;test_first_char&quot;, &quot;a abcd&quot;, &quot;bcd&quot;, &quot;20&quot;);
      
        remove_char('a', str);
        str[sizeof(str) - 1] = '\0'; 
      
        print_test_output(ys, str); 
      }
      
      void test_last_char(){
        char str[128] = &quot;abcde&quot;;
        struct yaml_string * ys = create_yaml();
      
        print_test_info(ys, &quot;test_last_char&quot;, &quot;e abcde&quot;, &quot;abcd&quot;, &quot;20&quot;);
        
        remove_char('e', str);
        str[ sizeof(str) - 1] = '\0';
        
        print_test_output(ys, str);
      }
      
      void test_3(){
        char str[128] = &quot;abcde&quot;;
        struct yaml_string * ys = create_yaml();
      
        print_test_info(ys, &quot;test_3&quot;, &quot;e abcde&quot;, &quot;abcd&quot;, &quot;20&quot;);
        
        remove_char('e', str);
        str[ sizeof(str) - 1] = '\0';
        
        print_test_output(ys, str);
      }
      
      void test_4(){
        char str[128] = &quot;abcde&quot;;
        struct yaml_string * ys = create_yaml();
      
        print_test_info(ys, &quot;test_4&quot;, &quot;e abcde&quot;, &quot;abcd&quot;, &quot;20&quot;);
      
        remove_char('e', str);
        str[ sizeof(str) - 1] = '\0';
        
        print_test_output(ys, str);
      }
      
      void test_5(){
        char str[128] = &quot;abcde&quot;;
        struct yaml_string * ys = create_yaml();
      
        print_test_info(ys, &quot;test_5&quot;, &quot;e abcde&quot;, &quot;abcd&quot;, &quot;20&quot;);
        
        remove_char('e', str);
        str[ sizeof(str) - 1] = '\0';
        
        print_test_output(ys, str);
      }
      
      void print_results(){
        int bytes_read, err;
        char buff[MAX_YAML_LEN] = &quot;&quot;;
      
        bytes_read = read(pipe_des[IN], buff, MAX_YAML_LEN);
        quitif(bytes_read);
        err = close(pipe_des[IN]);
        quitif(err);
      	
        err = write(OUT, buff, bytes_read); 
        quitif(err);
      }
      
      void err_handler(int sig){
      
        int i;
        char arith_err[128] = &quot;&quot;;
        char mem_err[128] = &quot;&quot;;
        char sys_err[128] = &quot;&quot;;
        char indent[128] = &quot;&quot;;
      
        for (i = 0 ; i &lt; INDENT ; i++)
          indent[i] = ' ';  
        sprintf(arith_err, &quot;%s%s&quot;, indent, &quot;error: arithmetic\n&quot;);
        sprintf(mem_err, &quot;%s%s&quot;, indent, &quot;error: memory\n&quot;);
        sprintf(sys_err, &quot;%s%s&quot;, indent, &quot;error: memory\n&quot;);
      
        switch (sig){
          case SIGFPE:
            write(pipe_des[OUT], arith_err, strlen(arith_err));
          break;
      
          case SIGBUS:
            write(pipe_des[OUT], mem_err, strlen(mem_err));
          break;
      
          case SIGSEGV:
            write(pipe_des[OUT], mem_err, strlen(mem_err));
          break;
      
          case SIGSYS:
            write(pipe_des[OUT], sys_err, strlen(sys_err));
          break;
      
          case SIGILL:
            write(pipe_des[OUT], mem_err, strlen(mem_err));
          break;
        }
        raise(sig);
      }
      
      void handle_signals(){
        struct sigaction act;
      
        sigemptyset(&amp;act.sa_mask);
        sigemptyset(&amp;act.sa_mask);
        act.sa_flags = SA_RESETHAND;
        act.sa_handler = err_handler;
      
        sigaction(SIGFPE, &amp;act, NULL);
        sigaction(SIGBUS, &amp;act, NULL);
        sigaction(SIGSEGV, &amp;act, NULL);
        sigaction(SIGSYS, &amp;act, NULL);
        sigaction(SIGILL, &amp;act, NULL);
        sigaction(SIGSYS, &amp;act, NULL);
      }
      
      void run_tests(){
        int err;
        pid_t stat;
      
        /* Each of the test functions will be called in its own fork */
        void (** unit_test) (void);
        void (* test_fns[N_UNIT_TESTS + 1]) (void) = 
          {test_first_char,
           test_last_char,
           test_3,
           test_4,
           test_5, NULL};
      
        for (unit_test = test_fns ; *unit_test ; unit_test++){
      
          err = pipe(pipe_des);
          quitif(err);
      
          switch (fork()){
      
            case -1:
              quitif(-1);
              break;
      
            /* Execute the unit test in the child */
            case 0:
              close(pipe_des[IN]);
      
              handle_signals();
              
              (*unit_test)();
              err = close(pipe_des[OUT]);
              quitif(err);
      
              exit(0);
              break;
      
            /* Wait for the child to finish the unit test */
            default:
              close(pipe_des[OUT]);
      
              err = wait(&amp;stat);
              quitif(err);
      
              print_results();
              break;
          }
        }
      }
      
      int main(){
        run_tests();
        return 0;
      }</sourceCode><language>11</language><input></input><run>true</run><private>true</private></createSubmission></env:Body></env:Envelope>
    headers: 
      soapaction: 
      - "\"createSubmission\""
      content-type: 
      - text/xml;charset=UTF-8
  response: !ruby/struct:VCR::Response 
    status: !ruby/struct:VCR::ResponseStatus 
      code: 200
      message: OK
    headers: 
      date: 
      - Sun, 19 Jun 2011 07:20:37 GMT
      server: 
      - Apache
      x-powered-by: 
      - PHP/5.2.14-pl0-gentoo
      set-cookie: 
      - PHPSESSID=d41198c48506334761a54c691f4c2a86; path=/
      expires: 
      - Thu, 19 Nov 1981 08:52:00 GMT
      cache-control: 
      - no-store, no-cache, must-revalidate, post-check=0, pre-check=0
      pragma: 
      - no-cache
      content-length: 
      - "764"
      vary: 
      - Accept-Encoding,User-Agent
      content-type: 
      - text/xml; charset=utf-8
    body: |
      <?xml version="1.0" encoding="UTF-8"?>
      <SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns1="http://www.ideone.com/api/1/service" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ns2="http://xml.apache.org/xml-soap" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"><SOAP-ENV:Body><ns1:createSubmissionResponse><return xsi:type="ns2:Map"><item><key xsi:type="xsd:string">error</key><value xsi:type="xsd:string">OK</value></item><item><key xsi:type="xsd:string">link</key><value xsi:type="xsd:string">rcDQd</value></item></return></ns1:createSubmissionResponse></SOAP-ENV:Body></SOAP-ENV:Envelope>

    http_version: "1.1"
- !ruby/struct:VCR::HTTPInteraction 
  request: !ruby/struct:VCR::Request 
    method: :post
    uri: http://www.ideone.com:80/api/1/service
    body: <?xml version="1.0" encoding="UTF-8"?><env:Envelope xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:wsdl="http://www.ideone.com/api/1/service" xmlns:env="http://schemas.xmlsoap.org/soap/envelope/"><env:Body><getSubmissionStatus><user>cozysystems</user><pass>Manbat22+</pass><link>rcDQd</link></getSubmissionStatus></env:Body></env:Envelope>
    headers: 
      content-type: 
      - text/xml;charset=UTF-8
      cookie: 
      - PHPSESSID=d41198c48506334761a54c691f4c2a86; path=/
      soapaction: 
      - "\"getSubmissionStatus\""
  response: !ruby/struct:VCR::Response 
    status: !ruby/struct:VCR::ResponseStatus 
      code: 200
      message: OK
    headers: 
      date: 
      - Sun, 19 Jun 2011 07:20:41 GMT
      server: 
      - Apache
      x-powered-by: 
      - PHP/5.2.14-pl0-gentoo
      expires: 
      - Thu, 19 Nov 1981 08:52:00 GMT
      cache-control: 
      - no-store, no-cache, must-revalidate, post-check=0, pre-check=0
      pragma: 
      - no-cache
      content-length: 
      - "853"
      vary: 
      - Accept-Encoding,User-Agent
      content-type: 
      - text/xml; charset=utf-8
    body: |
      <?xml version="1.0" encoding="UTF-8"?>
      <SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns1="http://www.ideone.com/api/1/service" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ns2="http://xml.apache.org/xml-soap" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"><SOAP-ENV:Body><ns1:getSubmissionStatusResponse><return xsi:type="ns2:Map"><item><key xsi:type="xsd:string">error</key><value xsi:type="xsd:string">OK</value></item><item><key xsi:type="xsd:string">status</key><value xsi:type="xsd:int">0</value></item><item><key xsi:type="xsd:string">result</key><value xsi:type="xsd:int">15</value></item></return></ns1:getSubmissionStatusResponse></SOAP-ENV:Body></SOAP-ENV:Envelope>

    http_version: "1.1"
- !ruby/struct:VCR::HTTPInteraction 
  request: !ruby/struct:VCR::Request 
    method: :post
    uri: http://www.ideone.com:80/api/1/service
    body: <?xml version="1.0" encoding="UTF-8"?><env:Envelope xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:wsdl="http://www.ideone.com/api/1/service" xmlns:env="http://schemas.xmlsoap.org/soap/envelope/"><env:Body><getSubmissionDetails><user>cozysystems</user><pass>Manbat22+</pass><link>rcDQd</link><withInput>true</withInput><withOutput>true</withOutput></getSubmissionDetails></env:Body></env:Envelope>
    headers: 
      content-type: 
      - text/xml;charset=UTF-8
      cookie: 
      - PHPSESSID=d41198c48506334761a54c691f4c2a86; path=/
      soapaction: 
      - "\"getSubmissionDetails\""
  response: !ruby/struct:VCR::Response 
    status: !ruby/struct:VCR::ResponseStatus 
      code: 200
      message: OK
    headers: 
      date: 
      - Sun, 19 Jun 2011 07:20:42 GMT
      server: 
      - Apache
      x-powered-by: 
      - PHP/5.2.14-pl0-gentoo
      expires: 
      - Thu, 19 Nov 1981 08:52:00 GMT
      cache-control: 
      - no-store, no-cache, must-revalidate, post-check=0, pre-check=0
      pragma: 
      - no-cache
      content-length: 
      - "2384"
      vary: 
      - Accept-Encoding,User-Agent
      content-type: 
      - text/xml; charset=utf-8
    body: |
      <?xml version="1.0" encoding="UTF-8"?>
      <SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns1="http://www.ideone.com/api/1/service" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ns2="http://xml.apache.org/xml-soap" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"><SOAP-ENV:Body><ns1:getSubmissionDetailsResponse><return xsi:type="ns2:Map"><item><key xsi:type="xsd:string">error</key><value xsi:type="xsd:string">OK</value></item><item><key xsi:type="xsd:string">langId</key><value xsi:type="xsd:int">11</value></item><item><key xsi:type="xsd:string">langName</key><value xsi:type="xsd:string">C</value></item><item><key xsi:type="xsd:string">langVersion</key><value xsi:type="xsd:string">gcc-4.3.4</value></item><item><key xsi:type="xsd:string">time</key><value xsi:type="xsd:float">0</value></item><item><key xsi:type="xsd:string">date</key><value xsi:type="xsd:string">2011-06-19 09:20:38</value></item><item><key xsi:type="xsd:string">status</key><value xsi:type="xsd:int">0</value></item><item><key xsi:type="xsd:string">result</key><value xsi:type="xsd:int">15</value></item><item><key xsi:type="xsd:string">memory</key><value xsi:type="xsd:int">1852</value></item><item><key xsi:type="xsd:string">signal</key><value xsi:type="xsd:int">0</value></item><item><key xsi:type="xsd:string">public</key><value xsi:type="xsd:boolean">false</value></item><item><key xsi:type="xsd:string">input</key><value xsi:type="xsd:string"></value></item><item><key xsi:type="xsd:string">output</key><value xsi:type="xsd:string">test_first_char:
          input: |
              a abcd
          expected: |
              bcd
          points: |
              20
          output: |
              bcd
      test_last_char:
          input: |
              e abcde
          expected: |
              abcd
          points: |
              20
          output: |
              abcd
      test_3:
          input: |
              e abcde
          expected: |
              abcd
          points: |
              20
          output: |
              abcd
      test_4:
          input: |
              e abcde
          expected: |
              abcd
          points: |
              20
          output: |
              abcd
      test_5:
          input: |
              e abcde
          expected: |
              abcd
          points: |
              20
          output: |
              abcd
      </value></item></return></ns1:getSubmissionDetailsResponse></SOAP-ENV:Body></SOAP-ENV:Envelope>

    http_version: "1.1"
